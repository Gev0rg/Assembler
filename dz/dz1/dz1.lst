     1                                  section .data
     2                                  
     3 00000000 496E707574206E756D-         inputNum db "Input number:", 10
     3 00000009 6265723A0A         
     4                                      lenInput equ $-inputNum
     5                                   
     6 0000000E 596F75722073747269-         outputString db "Your string:", 10
     6 00000017 6E673A0A           
     7                                      lenOutput equ $-outputString
     8                                   
     9                                      ;Сообщения об ошибках
    10 0000001B 57726F6E6720696E70-         ErrorConvMsg db "Wrong input! Please, try again",10
    10 00000024 75742120506C656173-
    10 0000002D 652C20747279206167-
    10 00000036 61696E0A           
    11                                      lenConvMsg equ $-ErrorConvMsg
    12                                  
    13 0000003A 20<rept>                    RezBuf times 30 db ' '
    14                                      lenRez equ $-RezBuf
    15                                  
    16 00000058 0A                          Ent db 10
    17                                  
    18                                  section .bss
    19                                  
    20 00000000 <res 00000014>              InBuf resw 10
    21                                      lenIn equ $-InBuf
    22                                  
    23 00000014 <res 00000002>              N resw 1
    24                                  
    25 00000016 <res 00000001>              Buk resb 1
    26                                  
    27                                  section .text
    28                                  
    29                                      global _start
    30                                  
    31                                  _start:
    32                                  
    33 00000000 B801000000                  mov rax, 1
    34 00000005 BF01000000                  mov rdi, 1
    35 0000000A 48BE-                       mov rsi, inputNum
    35 0000000C [0000000000000000] 
    36 00000014 BA0E000000                  mov rdx, lenInput
    37 00000019 0F05                        syscall
    38                                  
    39 0000001B B800000000                  mov rax, 0
    40 00000020 BF00000000                  mov rdi, 0
    41 00000025 48BE-                       mov rsi, InBuf
    41 00000027 [0000000000000000] 
    42 0000002F BA14000000                  mov rdx, lenIn
    43 00000034 0F05                        syscall
    44                                  
    45 00000036 BE[00000000]                mov esi, InBuf
    46 0000003B E82A010000                  call StrToInt64
    47 00000040 83FB00                      cmp ebx, 0
    48 00000043 0F85AA000000                jne errorConvert
    49                                  
    50 00000049 4883F800                    cmp rax, 0 
    51 0000004D 0F84BB000000                je exit
    52                                  
    53 00000053 48890425[14000000]          mov [N], rax
    54                                  
    55 0000005B 488B0C25[14000000]          mov rcx, [N]
    56 00000063 BB01000000                  mov rbx, 1
    57 00000068 B041                        mov al, 65
    58 0000006A BA00000000                  mov rdx, 0
    59                                  
    60                                  cycle1:
    61                                  
    62 0000006F 4839D9                      cmp rcx, rbx
    63 00000072 7F0A                        jg more
    64 00000074 4889CB                      mov rbx, rcx
    65 00000077 B901000000                  mov rcx, 1
    66 0000007C EB06                        jmp every
    67                                  
    68                                  more:
    69                                      
    70 0000007E 4829D9                      sub rcx, rbx
    71 00000081 48FFC1                      inc rcx
    72                                      
    73                                  every:
    74                                  
    75 00000084 51                          push rcx
    76 00000085 4889D9                      mov rcx, rbx
    77                                  
    78                                  cycle2:
    79                                  
    80 00000088 488DBA[3A000000]            lea rdi, [RezBuf + rdx]
    81 0000008F AA                          stosb
    82 00000090 48FFC2                      inc rdx
    83                                  
    84 00000093 E2F3                    loop cycle2
    85                                  
    86 00000095 48FFC3                      inc rbx
    87 00000098 FEC0                        inc al
    88 0000009A 59                          pop rcx
    89                                  
    90 0000009B E2D2                    loop cycle1
    91                                  
    92 0000009D BF01000000                  mov rdi, 1
    93 000000A2 48BE-                       mov rsi, outputString
    93 000000A4 [0E00000000000000] 
    94 000000AC BA0D000000                  mov rdx, lenOutput
    95 000000B1 B801000000                  mov rax, 1
    96 000000B6 0F05                        syscall
    97                                  
    98 000000B8 BF01000000                  mov rdi, 1
    99 000000BD 48BE-                       mov rsi, RezBuf
    99 000000BF [3A00000000000000] 
   100 000000C7 488B1425[14000000]          mov rdx, [N]
   101 000000CF B801000000                  mov rax, 1
   102 000000D4 0F05                        syscall
   103                                  
   104 000000D6 B801000000                  mov rax, 1
   105 000000DB BF01000000                  mov rdi, 1
   106 000000E0 48BE-                       mov rsi, Ent
   106 000000E2 [5800000000000000] 
   107 000000EA BA01000000                  mov rdx, 1
   108 000000EF 0F05                        syscall
   109                                  
   110 000000F1 EB1B                        jmp exit
   111                                  
   112                                  errorConvert:
   113                                  
   114 000000F3 B801000000                  mov rax, 1
   115 000000F8 BF01000000                  mov rdi, 1
   116 000000FD 48BE-                       mov rsi, ErrorConvMsg
   116 000000FF [1B00000000000000] 
   117 00000107 BA1F000000                  mov rdx, lenConvMsg
   118 0000010C 0F05                        syscall
   119                                      
   120                                  exit:
   121                                  
   122 0000010E B83C000000                  mov rax, 60 ; системный вызов 60 (exit)
   123 00000113 4831FF                      xor rdi, rdi ; return code 0   
   124 00000116 0F05                        syscall
   125                                   
   126                                  %include "../lib.asm"
     1                              <1>   section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000118 57                  <1>          push   rdi
     4 00000119 53                  <1>          push   rbx
     5 0000011A 52                  <1>          push   rdx
     6 0000011B 51                  <1>          push   rcx
     7 0000011C 56                  <1> 		 push   rsi
     8 0000011D C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 00000120 83F800              <1>          cmp    eax,0
    10 00000123 7D05                <1>          jge    .l1
    11 00000125 F7D8                <1>          neg    eax
    12 00000127 C6062D              <1>          mov    byte[rsi],'-'
    13 0000012A C646060A            <1> .l1      mov    byte[rsi+6],10
    14 0000012E BF05000000          <1>          mov    rdi,5
    15 00000133 66BB0A00            <1>          mov    bx,10
    16 00000137 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 00000139 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 0000013C 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 0000013F 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 00000142 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 00000145 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 00000149 75EC                <1>          jne    .again
    24 0000014B B906000000          <1>          mov    rcx, 6
    25 00000150 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 00000153 4889C8              <1> 		 mov    rax,rcx
    27 00000156 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 00000159 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 0000015C 56                  <1> 		 push   rsi
    30 0000015D 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 00000161 5F                  <1> 		 pop    rdi
    32 00000162 F3A4                <1>          rep movsb
    33 00000164 5E                  <1>          pop    rsi  
    34 00000165 59                  <1>          pop    rcx
    35 00000166 5A                  <1>          pop    rdx
    36 00000167 5B                  <1>          pop    rbx
    37 00000168 5F                  <1>          pop    rdi
    38 00000169 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 0000016A 57                  <1>          push   rdi
    41 0000016B B739                <1>          mov    bh, '9'
    42 0000016D B330                <1>          mov    bl, '0'
    43 0000016F 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 00000170 803E2D              <1>          cmp    byte[rsi], '-'
    45 00000173 7503                <1>          jne    .prod
    46 00000175 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 00000178 FC                  <1> .prod    cld
    48 00000179 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 0000017C AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 0000017D 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 0000017F 741F                <1>          je     .Return
    52 00000181 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 00000183 722F                <1>          jb     .Error  ; "����" � ������
    54 00000185 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 00000187 772B                <1>          ja     .Error  ; "����" � ������
    56 00000189 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 0000018B 6698                <1>          cbw            ; ��������� �� �����
    58 0000018D 6650                <1>          push   ax      ; ��������� � �����
    59 0000018F 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 00000193 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 00000196 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000198 6601F8              <1>          add    ax, di
    63 0000019B 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 0000019E EBDC                <1>          jmp    .cycle
    65 000001A0 5E                  <1> .Return: pop    rsi
    66 000001A1 BB00000000          <1>          mov    rbx, 0
    67 000001A6 803E2D              <1>          cmp    byte[rsi], '-'
    68 000001A9 7503                <1>          jne    .J
    69 000001AB 66F7DF              <1>          neg    di
    70 000001AE 6689F8              <1> .J       mov    ax, di
    71 000001B1 98                  <1>          cwde
    72 000001B2 EB0B                <1>          jmp    .R
    73 000001B4 5E                  <1> .Error:  pop    rsi
    74 000001B5 B800000000          <1>          mov    rax, 0
    75 000001BA BB01000000          <1>          mov    rbx, 1
    76 000001BF 5F                  <1> .R       pop    rdi
    77 000001C0 C3                  <1>          ret
