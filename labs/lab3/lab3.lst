     1                                  section .data
     2                                  
     3                                      ; Консольный интерфейс
     4 00000000 696E70757420513A0A          inputQ db "input Q:",10
     5 00000009 696E70757420443A0A          inputD db "input D:",10
     6                                      lenInput equ $-inputD
     7                                  
     8 00000012 526573756C74200A            res db "Result ",10
     9                                      lenRes equ $-res
    10                                  
    11                                      ; Сообщения об ошибках
    12 0000001A 4469766973696F6E20-         ErrorZeroMsg db "Division by zero!!",10
    12 00000023 6279207A65726F2121-
    12 0000002C 0A                 
    13                                      lenZeroMsg equ $-ErrorZeroMsg
    14 0000002D 57726F6E6720696E70-         ErrorConvMsg db "Wrong input! Please, try again",10
    14 00000036 75742120506C656173-
    14 0000003F 652C20747279206167-
    14 00000048 61696E0A           
    15                                      lenConvMsg equ $-ErrorConvMsg
    16                                  
    17                                  
    18                                  section .bss
    19                                  
    20 00000000 <res 0000000A>              InBuf resb 10 ; буфер ввода
    21                                      lenIn equ $-InBuf
    22 0000000A <res 0000000A>              OutBuf resb 10          
    23                                  
    24 00000014 <res 00000002>              Q resw 1
    25 00000016 <res 00000002>              D resw 1
    26 00000018 <res 00000002>              F resw 1
    27                                  
    28                                  section .text
    29                                  
    30                                      global _start
    31                                      _start:
    32                                          ; Считываем Q
    33 00000000 B801000000                      mov rax, 1 ; системная функция 1 (write)
    34 00000005 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    35 0000000A 48BE-                           mov rsi, inputQ ; адрес выводимой строки
    35 0000000C [0000000000000000] 
    36 00000014 BA09000000                      mov rdx, lenInput ; длина строки
    37 00000019 0F05                            syscall ; вызов системной функции
    38                                  
    39 0000001B B800000000                      mov rax, 0 ; системная функция 0 (read)
    40 00000020 BF00000000                      mov rdi, 0 ; дескриптор файла stdin=0
    41 00000025 48BE-                           mov rsi, InBuf    
    41 00000027 [0000000000000000] 
    42 0000002F BA0A000000                      mov rdx, lenIn    
    43 00000034 0F05                            syscall          
    44 00000036 BE[00000000]                    mov esi,InBuf ; закидываем число из буфера в регистр
    45 0000003B E892010000                      call StrToInt64 ; и вызываем функцию преобразования
    46 00000040 83FB00                          cmp EBX, 0 ; проверка кода ошибки
    47 00000043 0F8510010000                    jne errorConvert ; при преобразовании обнаружена ошибка
    48 00000049 66890425[14000000]              mov [Q],ax ; запись числа в память
    49                                  
    50                                          ; Считываем D
    51 00000051 B801000000                      mov rax, 1 ; системная функция 1 (write)
    52 00000056 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    53 0000005B 48BE-                           mov rsi, inputD ; адрес выводимой строки
    53 0000005D [0900000000000000] 
    54 00000065 BA09000000                      mov rdx, lenInput ; длина строки
    55 0000006A 0F05                            syscall ; вызов системной функции
    56                                  
    57 0000006C B800000000                      mov rax, 0
    58 00000071 BF00000000                      mov rdi, 0
    59 00000076 48BE-                           mov rsi, InBuf    
    59 00000078 [0000000000000000] 
    60 00000080 BA0A000000                      mov rdx, lenIn    
    61 00000085 0F05                            syscall          
    62 00000087 BE[00000000]                    mov esi,InBuf ; адрес введенной строки
    63 0000008C E841010000                      call StrToInt64
    64 00000091 83FB00                          cmp ebx, 0 ; проверка кода ошибки
    65 00000094 0F85BF000000                    jne errorConvert ; при преобразовании обнаружена ошибка
    66 0000009A 66890425[16000000]              mov [D],ax ; запись числа в память
    67                                  
    68                                          ; Вычисляем
    69 000000A2 668B1C25[14000000]              mov bx , [Q]
    70 000000AA 668B0425[16000000]              mov ax , [D]
    71 000000B2 66B90500                        mov cx , 5
    72 000000B6 6629D8                          sub ax, bx
    73 000000B9 66F7E9                          imul cx
    74 000000BC 6683FB0A                        cmp bx, 10
    75 000000C0 7C0A                            jl else
    76 000000C2 66890425[18000000]              mov [F], ax
    77 000000CA EB32                            jmp correct
    78                                  
    79                                      else:
    80 000000CC 668B0425[14000000]              mov ax, [Q]
    81 000000D4 66F7E8                          imul ax
    82 000000D7 668B1C25[16000000]              mov bx, [D]
    83 000000DF 6683EB05                        sub bx, 5
    84 000000E3 6683FB00                        cmp bx, 0
    85 000000E7 7453                            je errorZero
    86 000000E9 66F7FB                          idiv bx
    87 000000EC 66030425[16000000]              add ax, [D]
    88 000000F4 66890425[18000000]              mov [F], ax
    89 000000FC EB00                            jmp correct
    90                                  
    91                                      correct:
    92                                          ; Выводим ответ
    93 000000FE B801000000                      mov rax, 1 ; системная функция 1 (write)
    94 00000103 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    95 00000108 48BE-                           mov rsi, res ; адрес выводимой строки
    95 0000010A [1200000000000000] 
    96 00000112 BA08000000                      mov rdx, lenRes ; длина строки
    97 00000117 0F05                            syscall ; вызов системной функции
    98                                  
    99 00000119 BE[0A000000]                    mov esi, OutBuf ; загрузка адреса буфера вывода
   100 0000011E 668B0425[18000000]              mov ax, [F] ; загрузка числа в регистр
   101 00000126 98                              cwde ; развертывание числа из ax в eax
   102 00000127 E854000000                      call IntToStr64
   103                                  
   104 0000012C 4889C2                          mov rdx, rax ; длина строки
   105 0000012F 66B80100                        mov ax, 1
   106 00000133 BF01000000                      mov rdi, 1
   107 00000138 0F05                            syscall ; вывод ответа
   108 0000013A EB3A                            jmp exit
   109                                  
   110                                      errorZero:
   111 0000013C B801000000                      mov rax, 1
   112 00000141 BF01000000                      mov rdi, 1
   113 00000146 48BE-                           mov rsi, ErrorZeroMsg
   113 00000148 [1A00000000000000] 
   114 00000150 BA13000000                      mov rdx, lenZeroMsg
   115 00000155 0F05                            syscall
   116 00000157 EB1D                            jmp exit
   117                                  
   118                                      errorConvert:
   119 00000159 B801000000                      mov rax, 1
   120 0000015E BF01000000                      mov rdi, 1
   121 00000163 48BE-                           mov rsi, ErrorConvMsg
   121 00000165 [2D00000000000000] 
   122 0000016D BA1F000000                      mov rdx, lenConvMsg 
   123 00000172 0F05                            syscall
   124 00000174 EB00                            jmp exit
   125                                  exit:             
   126 00000176 B83C000000                      mov rax, 60 ; системный вызов 60 (exit)
   127 0000017B 4831FF                          xor rdi, rdi ; return code 0    
   128 0000017E 0F05                            syscall               
   129                                  
   130                                  %include "../lib.asm"
     1                              <1>   section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000180 57                  <1>          push   rdi
     4 00000181 53                  <1>          push   rbx
     5 00000182 52                  <1>          push   rdx
     6 00000183 51                  <1>          push   rcx
     7 00000184 56                  <1> 		 push   rsi
     8 00000185 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 00000188 83F800              <1>          cmp    eax,0
    10 0000018B 7D05                <1>          jge    .l1
    11 0000018D F7D8                <1>          neg    eax
    12 0000018F C6062D              <1>          mov    byte[rsi],'-'
    13 00000192 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000196 BF05000000          <1>          mov    rdi,5
    15 0000019B 66BB0A00            <1>          mov    bx,10
    16 0000019F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 000001A1 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 000001A4 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 000001A7 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 000001AA 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 000001AD 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 000001B1 75EC                <1>          jne    .again
    24 000001B3 B906000000          <1>          mov    rcx, 6
    25 000001B8 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 000001BB 4889C8              <1> 		 mov    rax,rcx
    27 000001BE 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 000001C1 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 000001C4 56                  <1> 		 push   rsi
    30 000001C5 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 000001C9 5F                  <1> 		 pop    rdi
    32 000001CA F3A4                <1>          rep movsb
    33 000001CC 5E                  <1>          pop    rsi  
    34 000001CD 59                  <1>          pop    rcx
    35 000001CE 5A                  <1>          pop    rdx
    36 000001CF 5B                  <1>          pop    rbx
    37 000001D0 5F                  <1>          pop    rdi
    38 000001D1 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 000001D2 57                  <1>          push   rdi
    41 000001D3 B739                <1>          mov    bh, '9'
    42 000001D5 B330                <1>          mov    bl, '0'
    43 000001D7 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 000001D8 803E2D              <1>          cmp    byte[rsi], '-'
    45 000001DB 7503                <1>          jne    .prod
    46 000001DD 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 000001E0 FC                  <1> .prod    cld
    48 000001E1 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 000001E4 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 000001E5 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 000001E7 741F                <1>          je     .Return
    52 000001E9 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 000001EB 722F                <1>          jb     .Error  ; "����" � ������
    54 000001ED 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 000001EF 772B                <1>          ja     .Error  ; "����" � ������
    56 000001F1 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 000001F3 6698                <1>          cbw            ; ��������� �� �����
    58 000001F5 6650                <1>          push   ax      ; ��������� � �����
    59 000001F7 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 000001FB 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 000001FE 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000200 6601F8              <1>          add    ax, di
    63 00000203 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 00000206 EBDC                <1>          jmp    .cycle
    65 00000208 5E                  <1> .Return: pop    rsi
    66 00000209 BB00000000          <1>          mov    rbx, 0
    67 0000020E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000211 7503                <1>          jne    .J
    69 00000213 66F7DF              <1>          neg    di
    70 00000216 6689F8              <1> .J       mov    ax, di
    71 00000219 98                  <1>          cwde
    72 0000021A EB0B                <1>          jmp    .R
    73 0000021C 5E                  <1> .Error:  pop    rsi
    74 0000021D B800000000          <1>          mov    rax, 0
    75 00000222 BB01000000          <1>          mov    rbx, 1
    76 00000227 5F                  <1> .R       pop    rdi
    77 00000228 C3                  <1>          ret
   131                                  
