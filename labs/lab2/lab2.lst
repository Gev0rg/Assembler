     1                                  section .data
     2                                      ; Консольный интерфейс
     3 00000000 696E70757420413A0A          inputA db "input A:",10
     4 00000009 696E70757420583A0A          inputX db "input X:",10
     5 00000012 696E70757420433A0A          inputC db "input C:",10
     6                                      lenInput equ $-inputC
     7                                  
     8 0000001B 526573756C74200A            res db "Result ",10
     9                                      lenRes equ $-res
    10                                  
    11                                      ; Сообщения об ошибках
    12 00000023 57726F6E6720696E70-         ErrorConvMsg db "Wrong input! Please, try again",10
    12 0000002C 75742120506C656173-
    12 00000035 652C20747279206167-
    12 0000003E 61696E0A           
    13                                      lenConvMsg equ $-ErrorConvMsg
    14                                  
    15                                  section .bss
    16                                  
    17 00000000 <res 0000000A>              InBuf resb 10 ; буфер ввода
    18                                      lenIn equ $-InBuf 
    19 0000000A <res 00000002>              A resw 1
    20 0000000C <res 00000002>              X resw 1
    21 0000000E <res 00000002>              C resw 1
    22                                  
    23 00000010 <res 00000002>              F resw 1           
    24 00000012 <res 0000000A>              OutBuf resb 10          
    25                                          
    26                                  section .text 
    27                                  
    28                                      global  _start
    29                                      _start:
    30                                          ; Считываем А
    31 00000000 B801000000                      mov rax, 1 ; системная функция 1 (write)
    32 00000005 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    33 0000000A 48BE-                           mov rsi, inputA ; адрес выводимой строки
    33 0000000C [0000000000000000] 
    34 00000014 BA09000000                      mov rdx, lenInput ; длина строки
    35 00000019 0F05                            syscall ; вызов системной функции
    36                                  
    37 0000001B B800000000                      mov rax, 0 ; системная функция 0 (read)
    38 00000020 BF00000000                      mov rdi, 0 ; дескриптор файла stdin=0
    39 00000025 48BE-                           mov rsi, InBuf    
    39 00000027 [0000000000000000] 
    40 0000002F BA0A000000                      mov rdx, lenIn    
    41 00000034 0F05                            syscall          
    42 00000036 BE[00000000]                    mov esi,InBuf ; закидываем число из буфера в регистр
    43 0000003B E8A6010000                      call StrToInt64 ; и вызываем функцию преобразования
    44 00000040 83FB00                          cmp EBX, 0 ; проверка кода ошибки
    45 00000043 0F85E8000000                    jne errorConvert ; при преобразовании обнаружена ошибка
    46 00000049 66890425[0A000000]              mov [A],ax ; запись числа в память
    47                                  
    48                                          ; Считываем X
    49 00000051 B801000000                      mov rax, 1 ; системная функция 1 (write)
    50 00000056 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    51 0000005B 48BE-                           mov rsi, inputX ; адрес выводимой строки
    51 0000005D [0900000000000000] 
    52 00000065 BA09000000                      mov rdx, lenInput ; длина строки
    53 0000006A 0F05                            syscall ; вызов системной функции
    54                                  
    55 0000006C B800000000                      mov rax, 0
    56 00000071 BF00000000                      mov rdi, 0
    57 00000076 48BE-                           mov rsi, InBuf    
    57 00000078 [0000000000000000] 
    58 00000080 BA0A000000                      mov rdx, lenIn    
    59 00000085 0F05                            syscall          
    60 00000087 BE[00000000]                    mov esi,InBuf ; адрес введенной строки
    61 0000008C E855010000                      call StrToInt64
    62 00000091 83FB00                          cmp EBX, 0 ; проверка кода ошибки
    63 00000094 0F8597000000                    jne errorConvert ; при преобразовании обнаружена ошибка
    64 0000009A 66890425[0C000000]              mov [X], ax ; запись числа в память
    65                                  
    66                                          ; Считываем C
    67 000000A2 B801000000                      mov rax, 1 ; системная функция 1 (write)
    68 000000A7 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    69 000000AC 48BE-                           mov rsi, inputC ; адрес выводимой строки
    69 000000AE [1200000000000000] 
    70 000000B6 BA09000000                      mov rdx, lenInput ; длина строки
    71 000000BB 0F05                            syscall ; вызов системной функции
    72                                  
    73 000000BD B800000000                      mov rax, 0
    74 000000C2 BF00000000                      mov rdi, 0
    75 000000C7 48BE-                           mov rsi, InBuf    
    75 000000C9 [0000000000000000] 
    76 000000D1 BA0A000000                      mov rdx, lenIn    
    77 000000D6 0F05                            syscall          
    78 000000D8 BE[00000000]                    mov esi,InBuf ; адрес введенной строки
    79 000000DD E804010000                      call StrToInt64
    80 000000E2 83FB00                          cmp EBX, 0 ; проверка кода ошибки
    81 000000E5 754A                            jne errorConvert ; при преобразовании обнаружена ошибка
    82 000000E7 66890425[0E000000]              mov [C],ax ; запись числа в память
    83                                  
    84                                          ; Проводим вычисления
    85 000000EF 668B0425[0C000000]              mov ax, [X]
    86 000000F7 6683C003                        add ax, 3
    87 000000FB F62C25[0E000000]                imul byte [C]
    88 00000102 6689C1                          mov cx, ax
    89 00000105 668B0425[0A000000]              mov ax, [A]
    90 0000010D F62C25[0A000000]                imul byte [A]
    91 00000114 F62C25[0A000000]                imul byte [A]
    92 0000011B 66BB0300                        mov bx, 3
    93 0000011F 6699                            cwd
    94 00000121 66F7FB                          idiv bx
    95 00000124 6629C8                          sub ax, cx
    96 00000127 66890425[10000000]              mov [F], ax
    97 0000012F EB1D                            jmp correct
    98                                  
    99                                      errorConvert:
   100 00000131 B801000000                      mov rax, 1 ; системная функция 1 (write)
   101 00000136 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
   102 0000013B 48BE-                           mov rsi, ErrorConvMsg ; адрес выводимой строки
   102 0000013D [2300000000000000] 
   103 00000145 BA1F000000                      mov rdx, lenConvMsg ; длина строки
   104 0000014A 0F05                            syscall ; вызов системной функции
   105 0000014C EB3C                            jmp exit
   106                                  
   107                                      correct:
   108                                          ; Выводим ответ
   109 0000014E B801000000                      mov rax, 1 ; системная функция 1 (write)
   110 00000153 BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
   111 00000158 48BE-                           mov rsi, res ; адрес выводимой строки
   111 0000015A [1B00000000000000] 
   112 00000162 BA08000000                      mov rdx, lenRes ; длина строки
   113 00000167 0F05                            syscall ; вызов системной функции
   114                                  
   115 00000169 BE[12000000]                    mov esi, OutBuf ; загрузка адреса буфера вывода
   116 0000016E 668B0425[10000000]              mov ax, [F] ; загрузка числа в регистр
   117 00000176 98                              cwde ; развертывание числа из ax в eax
   118 00000177 E818000000                      call IntToStr64
   119                                  
   120 0000017C 4889C2                          mov rdx, rax ; длина строки
   121 0000017F 66B80100                        mov ax, 1
   122 00000183 BF01000000                      mov rdi, 1
   123 00000188 0F05                            syscall ; вывод ответа
   124                                      
   125                                      exit:             
   126 0000018A B83C000000                      mov rax, 60 ; системный вызов 60 (exit)
   127 0000018F 4831FF                          xor rdi, rdi ; return code 0    
   128 00000192 0F05                            syscall               
   129                                  
   130                                  %include "../lib.asm"
     1                              <1>   section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000194 57                  <1>          push   rdi
     4 00000195 53                  <1>          push   rbx
     5 00000196 52                  <1>          push   rdx
     6 00000197 51                  <1>          push   rcx
     7 00000198 56                  <1> 		 push   rsi
     8 00000199 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 0000019C 83F800              <1>          cmp    eax,0
    10 0000019F 7D05                <1>          jge    .l1
    11 000001A1 F7D8                <1>          neg    eax
    12 000001A3 C6062D              <1>          mov    byte[rsi],'-'
    13 000001A6 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 000001AA BF05000000          <1>          mov    rdi,5
    15 000001AF 66BB0A00            <1>          mov    bx,10
    16 000001B3 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 000001B5 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 000001B8 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 000001BB 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 000001BE 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 000001C1 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 000001C5 75EC                <1>          jne    .again
    24 000001C7 B906000000          <1>          mov    rcx, 6
    25 000001CC 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 000001CF 4889C8              <1> 		 mov    rax,rcx
    27 000001D2 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 000001D5 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 000001D8 56                  <1> 		 push   rsi
    30 000001D9 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 000001DD 5F                  <1> 		 pop    rdi
    32 000001DE F3A4                <1>          rep movsb
    33 000001E0 5E                  <1>          pop    rsi  
    34 000001E1 59                  <1>          pop    rcx
    35 000001E2 5A                  <1>          pop    rdx
    36 000001E3 5B                  <1>          pop    rbx
    37 000001E4 5F                  <1>          pop    rdi
    38 000001E5 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 000001E6 57                  <1>          push   rdi
    41 000001E7 B739                <1>          mov    bh, '9'
    42 000001E9 B330                <1>          mov    bl, '0'
    43 000001EB 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 000001EC 803E2D              <1>          cmp    byte[rsi], '-'
    45 000001EF 7503                <1>          jne    .prod
    46 000001F1 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 000001F4 FC                  <1> .prod    cld
    48 000001F5 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 000001F8 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 000001F9 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 000001FB 741F                <1>          je     .Return
    52 000001FD 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 000001FF 722F                <1>          jb     .Error  ; "����" � ������
    54 00000201 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 00000203 772B                <1>          ja     .Error  ; "����" � ������
    56 00000205 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 00000207 6698                <1>          cbw            ; ��������� �� �����
    58 00000209 6650                <1>          push   ax      ; ��������� � �����
    59 0000020B 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 0000020F 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 00000212 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000214 6601F8              <1>          add    ax, di
    63 00000217 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 0000021A EBDC                <1>          jmp    .cycle
    65 0000021C 5E                  <1> .Return: pop    rsi
    66 0000021D BB00000000          <1>          mov    rbx, 0
    67 00000222 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000225 7503                <1>          jne    .J
    69 00000227 66F7DF              <1>          neg    di
    70 0000022A 6689F8              <1> .J       mov    ax, di
    71 0000022D 98                  <1>          cwde
    72 0000022E EB0B                <1>          jmp    .R
    73 00000230 5E                  <1> .Error:  pop    rsi
    74 00000231 B800000000          <1>          mov    rax, 0
    75 00000236 BB01000000          <1>          mov    rbx, 1
    76 0000023B 5F                  <1> .R       pop    rdi
    77 0000023C C3                  <1>          ret
