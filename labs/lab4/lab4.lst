     1                                  section .data
     2                                  
     3                                      ;Перенос строки для красивого вывода матрицы
     4                                      
     5 00000000 0A                          Ent db 10 
     6                                  
     7                                      ;Консольныф интерфейс
     8                                  
     9 00000001 496E707574206D6174-         inputMatr db "Input matrix(4*6) elements:", 10
     9 0000000A 72697828342A362920-
     9 00000013 656C656D656E74733A-
     9 0000001C 0A                 
    10                                      lenInput equ $-inputMatr
    11                                  
    12 0000001D 596F7572206D617472-         outputMatr db "Your matrix:", 10
    12 00000026 69783A0A           
    13                                      lenOutput equ $-outputMatr
    14                                  
    15 0000002A 53756D206F6620636F-         sum db "Sum of column elements:", 10
    15 00000033 6C756D6E20656C656D-
    15 0000003C 656E74733A0A       
    16                                      lenSum equ $-sum
    17                                  
    18                                      ;Сообщения об ошибках
    19 00000042 57726F6E6720696E70-         ErrorConvMsg db "Wrong input! Please, try again",10
    19 0000004B 75742120506C656173-
    19 00000054 652C20747279206167-
    19 0000005D 61696E0A           
    20                                      lenConvMsg equ $-ErrorConvMsg
    21                                  
    22                                  section .bss
    23                                  
    24 00000000 <res 00000030>              matrix resw 24
    25                                  
    26 00000030 <res 00000014>              InBuf resw 10
    27                                      lenIn equ $-InBuf
    28                                  
    29 00000044 <res 00000014>              OutBuf resw 10
    30                                  
    31                                  section .text
    32                                  
    33                                      global _start
    34                                      _start:
    35                                  
    36                                          ;Ввод массива
    37                                  
    38 00000000 B801000000                      mov rax, 1
    39 00000005 BF01000000                      mov rdi, 1
    40 0000000A 48BE-                           mov rsi, inputMatr
    40 0000000C [0100000000000000] 
    41 00000014 BA1C000000                      mov rdx, lenInput
    42 00000019 0F05                            syscall
    43                                  
    44 0000001B B918000000                      mov rcx, 24
    45 00000020 BB00000000                      mov rbx, 0
    46                                  
    47                                          cycleInput:
    48                                  
    49 00000025 51                                  push rcx
    50 00000026 53                                  push rbx
    51                                  
    52 00000027 B800000000                          mov rax, 0
    53 0000002C BF00000000                          mov rdi, 0
    54 00000031 48BE-                               mov rsi, InBuf
    54 00000033 [3000000000000000] 
    55 0000003B BA14000000                          mov rdx, lenIn
    56 00000040 0F05                                syscall
    57                                  
    58 00000042 BE[30000000]                        mov esi, InBuf
    59 00000047 E88F010000                          call StrToInt64
    60 0000004C 83FB00                              cmp ebx, 0
    61 0000004F 0F850F010000                        jne errorConvert
    62                                  
    63 00000055 5B                                  pop rbx
    64 00000056 59                                  pop rcx
    65                                  
    66 00000057 89841B[00000000]                    mov [matrix + rbx*2], eax
    67                                  
    68 0000005E 48FFC3                              inc rbx
    69                                  
    70 00000061 E2C2                            loop cycleInput
    71                                  
    72                                          ;Вывод массива
    73                                  
    74 00000063 B801000000                      mov rax, 1
    75 00000068 BF01000000                      mov rdi, 1
    76 0000006D 48BE-                           mov rsi, outputMatr
    76 0000006F [1D00000000000000] 
    77 00000077 BA0D000000                      mov rdx, lenOutput
    78 0000007C 0F05                            syscall
    79                                  
    80 0000007E B904000000                      mov rcx, 4
    81 00000083 BB00000000                      mov rbx, 0
    82                                  
    83                                          cycleOutput0:
    84                                  
    85 00000088 51                                  push rcx
    86                                  
    87 00000089 B906000000                          mov rcx, 6
    88                                  
    89                                              cycleOutput1:
    90                                  
    91 0000008E 8B841B[00000000]                        mov eax, [matrix + rbx*2]
    92 00000095 BE[44000000]                            mov esi, OutBuf
    93                                  
    94 0000009A 51                                      push rcx
    95 0000009B 53                                      push rbx
    96                                  
    97 0000009C E8E8000000                              call IntToStr64
    98                                  
    99 000000A1 4889C2                                  mov rdx, rax
   100 000000A4 B801000000                              mov rax, 1
   101 000000A9 BF01000000                              mov rdi, 1
   102 000000AE 48BE-                                   mov rsi, OutBuf
   102 000000B0 [4400000000000000] 
   103 000000B8 0F05                                    syscall
   104                                  
   105 000000BA 5B                                      pop rbx
   106 000000BB 59                                      pop rcx
   107                                  
   108 000000BC 48FFC3                                  inc rbx 
   109                                  
   110 000000BF E2CD                                loop cycleOutput1
   111                                              
   112 000000C1 B801000000                          mov rax, 1
   113 000000C6 BF01000000                          mov rdi, 1
   114 000000CB 48BE-                               mov rsi, Ent
   114 000000CD [0000000000000000] 
   115 000000D5 BA01000000                          mov rdx, 1
   116 000000DA 0F05                                syscall
   117                                  
   118 000000DC 59                                  pop rcx
   119                                  
   120 000000DD E2A9                            loop cycleOutput0
   121                                  
   122                                          ;Вывод суммы элементов каждого столбца
   123                                  
   124 000000DF B801000000                      mov rax, 1
   125 000000E4 BF01000000                      mov rdi, 1
   126 000000E9 48BE-                           mov rsi, sum
   126 000000EB [2A00000000000000] 
   127 000000F3 BA18000000                      mov rdx, lenSum
   128 000000F8 0F05                            syscall
   129                                  
   130 000000FA B906000000                      mov rcx, 6
   131 000000FF BB00000000                      mov rbx, 0
   132                                  
   133                                          cycleSum0:
   134                                  
   135 00000104 51                                  push rcx
   136 00000105 53                                  push rbx
   137                                  
   138 00000106 B800000000                          mov rax, 0
   139 0000010B B904000000                          mov rcx, 4
   140                                  
   141                                              cycleSum1:
   142                                  
   143 00000110 0383[00000000]                          add eax, [matrix + rbx]
   144 00000116 4883C30C                                add rbx, 12
   145                                  
   146 0000011A E2F4                                loop cycleSum1
   147                                  
   148 0000011C BE[44000000]                        mov esi, OutBuf
   149 00000121 E863000000                          call IntToStr64
   150                                  
   151 00000126 4889C2                              mov rdx, rax
   152 00000129 B801000000                          mov rax, 1
   153 0000012E BF01000000                          mov rdi, 1
   154 00000133 48BE-                               mov rsi, OutBuf
   154 00000135 [4400000000000000] 
   155 0000013D 0F05                                syscall
   156                                  
   157 0000013F 5B                                  pop rbx
   158 00000140 4883C302                            add rbx, 2
   159 00000144 59                                  pop rcx
   160                                  
   161 00000145 E2BD                            loop cycleSum0
   162                                  
   163 00000147 B801000000                      mov rax, 1
   164 0000014C BF01000000                      mov rdi, 1
   165 00000151 48BE-                           mov rsi, Ent
   165 00000153 [0000000000000000] 
   166 0000015B BA01000000                      mov rdx, 1
   167 00000160 0F05                            syscall
   168                                  
   169 00000162 EB1B                            jmp exit
   170                                  
   171                                          errorConvert:
   172                                  
   173 00000164 B801000000                          mov rax, 1
   174 00000169 BF01000000                          mov rdi, 1
   175 0000016E 48BE-                               mov rsi, ErrorConvMsg
   175 00000170 [4200000000000000] 
   176 00000178 BA1F000000                          mov rdx, lenConvMsg
   177 0000017D 0F05                                syscall
   178                                  
   179                                          exit:             
   180 0000017F B83C000000                          mov rax, 60 ; системный вызов 60 (exit)
   181 00000184 4831FF                              xor rdi, rdi ; return code 0    
   182 00000187 0F05                                syscall
   183                                  
   184                                  %include "../lib2.asm"
     1                              <1>   section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000189 57                  <1>          push   rdi
     4 0000018A 53                  <1>          push   rbx
     5 0000018B 52                  <1>          push   rdx
     6 0000018C 51                  <1>          push   rcx
     7 0000018D 56                  <1> 		 push   rsi
     8 0000018E C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 00000191 83F800              <1>          cmp    eax,0
    10 00000194 7D05                <1>          jge    .l1
    11 00000196 F7D8                <1>          neg    eax
    12 00000198 C6062D              <1>          mov    byte[rsi],'-'
    13 0000019B C6460620            <1> .l1      mov    byte[rsi+6]," "
    14 0000019F BF05000000          <1>          mov    rdi,5
    15 000001A4 66BB0A00            <1>          mov    bx,10
    16 000001A8 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 000001AA 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 000001AD 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 000001B0 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 000001B3 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 000001B6 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 000001BA 75EC                <1>          jne    .again
    24 000001BC B906000000          <1>          mov    rcx, 6
    25 000001C1 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 000001C4 4889C8              <1> 		 mov    rax,rcx
    27 000001C7 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 000001CA 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 000001CD 56                  <1> 		 push   rsi
    30 000001CE 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 000001D2 5F                  <1> 		 pop    rdi
    32 000001D3 F3A4                <1>          rep movsb
    33 000001D5 5E                  <1>          pop    rsi  
    34 000001D6 59                  <1>          pop    rcx
    35 000001D7 5A                  <1>          pop    rdx
    36 000001D8 5B                  <1>          pop    rbx
    37 000001D9 5F                  <1>          pop    rdi
    38 000001DA C3                  <1>          ret
    39                              <1> StrToInt64:
    40 000001DB 57                  <1>          push   rdi
    41 000001DC B739                <1>          mov    bh, '9'
    42 000001DE B330                <1>          mov    bl, '0'
    43 000001E0 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 000001E1 803E2D              <1>          cmp    byte[rsi], '-'
    45 000001E4 7503                <1>          jne    .prod
    46 000001E6 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 000001E9 FC                  <1> .prod    cld
    48 000001EA 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 000001ED AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 000001EE 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 000001F0 741F                <1>          je     .Return
    52 000001F2 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 000001F4 722F                <1>          jb     .Error  ; "����" � ������
    54 000001F6 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 000001F8 772B                <1>          ja     .Error  ; "����" � ������
    56 000001FA 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 000001FC 6698                <1>          cbw            ; ��������� �� �����
    58 000001FE 6650                <1>          push   ax      ; ��������� � �����
    59 00000200 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 00000204 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 00000207 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000209 6601F8              <1>          add    ax, di
    63 0000020C 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 0000020F EBDC                <1>          jmp    .cycle
    65 00000211 5E                  <1> .Return: pop    rsi
    66 00000212 BB00000000          <1>          mov    rbx, 0
    67 00000217 803E2D              <1>          cmp    byte[rsi], '-'
    68 0000021A 7503                <1>          jne    .J
    69 0000021C 66F7DF              <1>          neg    di
    70 0000021F 6689F8              <1> .J       mov    ax, di
    71 00000222 98                  <1>          cwde
    72 00000223 EB0B                <1>          jmp    .R
    73 00000225 5E                  <1> .Error:  pop    rsi
    74 00000226 B800000000          <1>          mov    rax, 0
    75 0000022B BB01000000          <1>          mov    rbx, 1
    76 00000230 5F                  <1> .R       pop    rdi
    77 00000231 C3                  <1>          ret
